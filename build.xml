<?xml version="1.0" encoding="UTF-8"?>
<project name="Symfony2-project" default="build">
    <target name="build.xml" depends="build-parallel"/>

    <target name="build-parallel" depends="prepare,lint,tools-parallel,phpcb"/>

    <target name="tools-parallel" description="Run tools in parallel">
        <parallel threadCount="2">
            <sequential>
                <antcall target="pdepend"/>
                <antcall target="phpmd-ci"/>
            </sequential>
            <antcall target="phpcpd"/>
            <antcall target="phpcs-ci"/>
            <antcall target="phploc"/>
            <antcall target="phpdox"/>
            <sequential>
                <antcall target="phpunit"/>
            </sequential>
        </parallel>
    </target>

    <target name="clean" description="Cleanup build artifacts">
        <delete dir="${basedir}/app/build/api"/>
        <delete dir="${basedir}/app/build/code-browser"/>
        <delete dir="${basedir}/app/build/coverage"/>
        <delete dir="${basedir}/app/build/logs"/>
        <delete dir="${basedir}/app/build/pdepend"/>
    </target>

    <target name="prepare" depends="clean" description="Prepare for build">
        <mkdir dir="${basedir}/app/build/api"/>
        <mkdir dir="${basedir}/app/build/code-browser"/>
        <mkdir dir="${basedir}/app/build/coverage"/>
        <mkdir dir="${basedir}/app/build/logs"/>
        <mkdir dir="${basedir}/app/build/pdepend"/>
        <mkdir dir="${basedir}/app/build/phpdox"/>
    </target>

    <target name="lint" description="Perform syntax check of sourcecode files">
        <apply executable="php" failonerror="true">
            <arg value="-l" />

            <fileset dir="${basedir}/src">
                <include name="**/*.php" />
                <modified />
            </fileset>

            <fileset dir="${basedir}/src/">
                <include name="**/*Test.php" />
                <modified />
            </fileset>
        </apply>
    </target>

    <target name="phploc" description="Measure project size using PHPLOC">
        <exec executable="${basedir}/bin/phploc">
            <arg value="--log-csv" />
            <arg value="${basedir}/app/build/logs/phploc.csv" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="pdepend" description="Calculate software metrics using PHP_Depend">
        <exec executable="${basedir}/bin/pdepend">
            <arg value="--jdepend-xml=${basedir}/app/build/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${basedir}/app/build/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${basedir}/app/build/pdepend/overview-pyramid.svg" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="phpmd" description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${basedir}/bin/phpmd">
            <arg path="${basedir}/src" />
            <arg value="text" />
            <arg value="${basedir}/app/Resources/jenkins/phpmd.xml" />
        </exec>
    </target>

    <target name="phpmd-ci" description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
        <exec executable="${basedir}/bin/phpmd">
            <arg path="${basedir}/src" />
            <arg value="xml" />
            <arg value="${basedir}/app/Resources/jenkins/phpmd.xml" />
            <arg value="--reportfile" />
            <arg value="${basedir}/app/build/logs/pmd.xml" />
        </exec>
    </target>

    <target name="phpcs" description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${basedir}/bin/phpcs">
            <arg value="--standard=Symfony2" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="phpcs-ci" description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
        <exec executable="${basedir}/bin/phpcs" output="/dev/null">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${basedir}/app/build/logs/checkstyle.xml" />
            <arg value="--standard=Symfony2" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="phpcpd" description="Find duplicate code using PHPCPD">
        <exec executable="${basedir}/bin/phpcpd">
            <arg value="--log-pmd" />
            <arg value="${basedir}/app/build/logs/pmd-cpd.xml" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="phpdox" description="Generate API documentation using phpDox">
        <exec executable="wget" failonerror="true">
          <arg value="-rnH" />
          <arg value="http://phpdox.de/releases/phpdox.phar" />
          <arg value="-O${basedir}/bin/phpdox" />
        </exec>
        <exec executable="chmod" failonerror="false">
          <arg value="775" />
          <arg value="${basedir}/bin/phpdox" />
        </exec>
        <exec executable="${basedir}/bin/phpdox">
            <arg value="-f" />
            <arg path="${basedir}/app/Resources/jenkins/phpdox.xml" />
        </exec>
    </target>

    <target name="phpcb" description="Aggregate tool output with PHP_CodeBrowser">
        <exec executable="${basedir}/bin/phpcb">
            <arg value="--log" />
            <arg path="${basedir}/app/build/logs" />
            <arg value="--source" />
            <arg path="${basedir}/src" />
            <arg value="--output" />
            <arg path="${basedir}/app/build/code-browser" />
        </exec>
    </target>

    <target name="composer"  description="Download Composer">
        <exec executable="wget" failonerror="true">
          <arg value="-rnH" />
          <arg value="http://getcomposer.org/composer.phar" />
        </exec>
        <exec executable="php" failonerror="true">
          <arg value="composer.phar" />
          <arg value="install" />
        </exec>
    </target>

    <target name="db-config" description="Create database">
        <exec executable="php" failonerror="false" >
          <arg value="app/console" />
          <arg value="doctrine:database:drop" />
          <arg value="--force" />
          <arg value="--env=test" />
        </exec>
        <exec executable="php" failonerror="true" >
          <arg value="app/console" />
          <arg value="doctrine:database:create" />
          <arg value="--env=test" />
        </exec>
        <exec executable="php" failonerror="true" >
          <arg value="app/console" />
          <arg value="doctrine:schema:update" />
          <arg value="--force" />
          <arg value="--env=test" />
        </exec>
    </target>

    <target name="phpunit" depends="composer, db-config" description="Run unit tests with PHPUnit">
        <exec executable="${basedir}/bin/phpunit" failonerror="true">
            <arg value="-c" />
            <arg path="${basedir}/app/phpunit.xml.dist" />
            <arg value="--log-junit" />
            <arg path="app/build/logs/junit.xml" />
        </exec>
    </target>

</project>

